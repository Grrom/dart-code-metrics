"use strict";(self.webpackChunkdart_code_metrics_website=self.webpackChunkdart_code_metrics_website||[]).push([[156],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>u});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=c(n),u=i,v=m["".concat(s,".").concat(u)]||m[u]||d[u]||o;return n?r.createElement(v,a(a({ref:t},p),{},{components:n})):r.createElement(v,a({ref:t},p))}));function u(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,a[1]=l;for(var c=2;c<o;c++)a[c]=n[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},1084:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var r=n(7462),i=(n(7294),n(3905));const o={},a="Avoid collection methods with unrelated types",l={unversionedId:"rules/common/avoid-collection-methods-with-unrelated-types",id:"rules/common/avoid-collection-methods-with-unrelated-types",title:"Avoid collection methods with unrelated types",description:"Rule id",source:"@site/docs/rules/common/avoid-collection-methods-with-unrelated-types.md",sourceDirName:"rules/common",slug:"/rules/common/avoid-collection-methods-with-unrelated-types",permalink:"/docs/rules/common/avoid-collection-methods-with-unrelated-types",draft:!1,editUrl:"https://github.com/dart-code-checker/dart-code-metrics/tree/master/website/docs/rules/common/avoid-collection-methods-with-unrelated-types.md",tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"Avoid banned imports",permalink:"/docs/rules/common/avoid-banned-imports"},next:{title:"Avoid duplicate exports",permalink:"/docs/rules/common/avoid-duplicate-exports"}},s={},c=[{value:"Rule id",id:"rule-id",level:2},{value:"Severity",id:"severity",level:2},{value:"Description",id:"description",level:2},{value:"Example",id:"example",level:3}],p={toc:c};function d(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"avoid-collection-methods-with-unrelated-types"},"Avoid collection methods with unrelated types"),(0,i.kt)("h2",{id:"rule-id"},"Rule id"),(0,i.kt)("p",null,"avoid-collection-methods-with-unrelated-types"),(0,i.kt)("h2",{id:"severity"},"Severity"),(0,i.kt)("p",null,"Warning"),(0,i.kt)("h2",{id:"description"},"Description"),(0,i.kt)("p",null,"Avoid using collection methods with unrelated types, such as accessing a map of integers using a string key."),(0,i.kt)("p",null,"This lint has been requested for a long time: Follow ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/dart-lang/linter/issues/1307"},"this link")," to see the details."),(0,i.kt)("p",null,"Related: Dart's built-in ",(0,i.kt)("inlineCode",{parentName:"p"},"list_remove_unrelated_type")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"iterable_contains_unrelated_type"),"."),(0,i.kt)("h3",{id:"example"},"Example"),(0,i.kt)("p",null,"Bad:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-dart"},'final map = Map<int, String>();\nmap["str"] = "value"; // LINT\nvar a = map["str"]; // LINT\nmap.containsKey("str"); // LINT\nmap.containsValue(42); // LINT\nmap.remove("str"); // LINT\n\nIterable<int>.empty().contains("str"); // LINT\n\nList<int>().remove("str"); // LINT\n\nfinal set = {10, 20, 30};\nset.contains("str"); // LINT\nset.containsAll(Iterable<String>.empty()); // LINT\nset.difference(<String>{}); // LINT\nprimitiveSet.intersection(<String>{}); // LINT\nset.lookup("str"); // LINT\nprimitiveList.remove("str"); // LINT\nset.removeAll(Iterable<String>.empty()); // LINT\nset.retainAll(Iterable<String>.empty()); // LINT\n')),(0,i.kt)("p",null,"Good:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-dart"},'final map = Map<int, String>();\nmap[42] = "value";\nvar a = map[42];\nmap.containsKey(42);\nmap.containsValue("value");\nmap.remove(42);\n\nIterable<int>.empty().contains(42);\n\nList<int>().remove(42);\n\nfinal set = {10, 20, 30};\nset.contains(42);\nset.containsAll(Iterable<int>.empty());\nset.difference(<int>{});\nprimitiveSet.intersection(<int>{});\nset.lookup(42);\nprimitiveList.remove(42);\nset.removeAll(Iterable<int>.empty());\nset.retainAll(Iterable<int>.empty());\n')))}d.isMDXComponent=!0}}]);