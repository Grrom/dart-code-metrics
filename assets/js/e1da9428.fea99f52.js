"use strict";(self.webpackChunkdart_code_metrics_website=self.webpackChunkdart_code_metrics_website||[]).push([[8250],{3905:function(e,t,r){r.d(t,{Zo:function(){return p},kt:function(){return d}});var n=r(7294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var s=n.createContext({}),l=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},p=function(e){var t=l(e.components);return n.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),u=l(r),d=i,f=u["".concat(s,".").concat(d)]||u[d]||m[d]||a;return r?n.createElement(f,o(o({ref:t},p),{},{components:r})):n.createElement(f,o({ref:t},p))}));function d(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=r.length,o=new Array(a);o[0]=u;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:i,o[1]=c;for(var l=2;l<a;l++)o[l]=r[l];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},5613:function(e,t,r){r.r(t),r.d(t,{assets:function(){return p},contentTitle:function(){return s},default:function(){return d},frontMatter:function(){return c},metadata:function(){return l},toc:function(){return m}});var n=r(7462),i=r(3366),a=(r(7294),r(3905)),o=["components"],c={sidebar_position:0,sidebar_label:"Overview"},s="Metrics overview",l={unversionedId:"metrics/overview",id:"metrics/overview",title:"Metrics overview",description:"Metrics are grouped by a category to help you understand their purpose.",source:"@site/docs/metrics/overview.md",sourceDirName:"metrics",slug:"/metrics/overview",permalink:"/docs/metrics/overview",draft:!1,editUrl:"https://github.com/dart-code-checker/dart-code-metrics/tree/master/website/docs/metrics/overview.md",tags:[],version:"current",sidebarPosition:0,frontMatter:{sidebar_position:0,sidebar_label:"Overview"},sidebar:"sidebar",previous:{title:"Prefer using onPush change detection strategy",permalink:"/docs/rules/angular/prefer-on-push-cd-strategy"},next:{title:"Cyclomatic Complexity",permalink:"/docs/metrics/cyclomatic-complexity"}},p={},m=[{value:"Function specific metrics",id:"function-specific-metrics",level:2},{value:"Class specific metrics",id:"class-specific-metrics",level:2},{value:"File specific metrics",id:"file-specific-metrics",level:2}],u={toc:m};function d(e){var t=e.components,r=(0,i.Z)(e,o);return(0,a.kt)("wrapper",(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"metrics-overview"},"Metrics overview"),(0,a.kt)("p",null,"Metrics are grouped by a category to help you understand their purpose."),(0,a.kt)("p",null,"Metrics configuration is ",(0,a.kt)("a",{parentName:"p",href:"../getting-started/configuration#configuring-a-metrics-entry"},"described here"),"."),(0,a.kt)("h2",{id:"function-specific-metrics"},"Function specific metrics"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("a",{parentName:"p",href:"/docs/metrics/cyclomatic-complexity"},"Cyclomatic Complexity")),(0,a.kt)("p",{parentName:"li"},"  The number of linearly-independent paths through a method.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("a",{parentName:"p",href:"/docs/metrics/halstead-volume"},"Halstead Volume")),(0,a.kt)("p",{parentName:"li"},"  The method size, based on the numbers of operators and operands.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("a",{parentName:"p",href:"/docs/metrics/lines-of-code"},"Lines of Code")),(0,a.kt)("p",{parentName:"li"},"  The number of physical lines of code of a method, including blank lines and comments.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("a",{parentName:"p",href:"/docs/metrics/maintainability-index"},"Maintainability Index")),(0,a.kt)("p",{parentName:"li"},"  The indicator which mean how maintainable the source code is.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("a",{parentName:"p",href:"/docs/metrics/maximum-nesting-level"},"Maximum Nesting")),(0,a.kt)("p",{parentName:"li"},"  The maximum nesting level of control structures within a method.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("a",{parentName:"p",href:"/docs/metrics/number-of-parameters"},"Number of Parameters")),(0,a.kt)("p",{parentName:"li"},"  The number of parameters received by a method.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("a",{parentName:"p",href:"/docs/metrics/source-lines-of-code"},"Source lines of Code")),(0,a.kt)("p",{parentName:"li"},"  The approximate number of source code lines in a method, blank lines and comments are not counted."))),(0,a.kt)("h2",{id:"class-specific-metrics"},"Class specific metrics"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("a",{parentName:"p",href:"/docs/metrics/number-of-methods"},"Number of Methods")),(0,a.kt)("p",{parentName:"li"},"  The number of methods of a class.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("a",{parentName:"p",href:"/docs/metrics/weight-of-class"},"Weight of a Class")),(0,a.kt)("p",{parentName:"li"},'  The number of "functional" public methods divided by the total number of public members.'))),(0,a.kt)("h2",{id:"file-specific-metrics"},"File specific metrics"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("a",{parentName:"p",href:"/docs/metrics/technical_debt"},"Technical Debt")),(0,a.kt)("p",{parentName:"li"},"  The cost of additional rework caused by choosing an easy (limited) solution now instead of using a better approach that would take longer."))))}d.isMDXComponent=!0}}]);