"use strict";(self.webpackChunkdart_code_metrics_website=self.webpackChunkdart_code_metrics_website||[]).push([[6425],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return m}});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var c=r.createContext({}),s=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},u=function(e){var n=s(e.components);return r.createElement(c.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=s(t),m=o,f=p["".concat(c,".").concat(m)]||p[m]||d[m]||i;return t?r.createElement(f,a(a({ref:n},u),{},{components:t})):r.createElement(f,a({ref:n},u))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,a=new Array(i);a[0]=p;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l.mdxType="string"==typeof e?e:o,a[1]=l;for(var s=2;s<i;s++)a[s]=t[s];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},138:function(e,n,t){t.r(n),t.d(n,{assets:function(){return u},contentTitle:function(){return c},default:function(){return m},frontMatter:function(){return l},metadata:function(){return s},toc:function(){return d}});var r=t(7462),o=t(3366),i=(t(7294),t(3905)),a=["components"],l={},c="Avoid non null assertion",s={unversionedId:"rules/common/avoid-non-null-assertion",id:"rules/common/avoid-non-null-assertion",title:"Avoid non null assertion",description:"Rule id",source:"@site/docs/rules/common/avoid-non-null-assertion.md",sourceDirName:"rules/common",slug:"/rules/common/avoid-non-null-assertion",permalink:"/docs/rules/common/avoid-non-null-assertion",draft:!1,editUrl:"https://github.com/dart-code-checker/dart-code-metrics/tree/master/website/docs/rules/common/avoid-non-null-assertion.md",tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"Avoid non ascii symbols",permalink:"/docs/rules/common/avoid-non-ascii-symbols"},next:{title:"Avoid throw in catch block",permalink:"/docs/rules/common/avoid-throw-in-catch-block"}},u={},d=[{value:"Rule id",id:"rule-id",level:2},{value:"Severity",id:"severity",level:2},{value:"Description",id:"description",level:2},{value:"Example",id:"example",level:3}],p={toc:d};function m(e){var n=e.components,t=(0,o.Z)(e,a);return(0,i.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"avoid-non-null-assertion"},"Avoid non null assertion"),(0,i.kt)("h2",{id:"rule-id"},"Rule id"),(0,i.kt)("p",null,"avoid-non-null-assertion"),(0,i.kt)("h2",{id:"severity"},"Severity"),(0,i.kt)("p",null,"Warning"),(0,i.kt)("h2",{id:"description"},"Description"),(0,i.kt)("p",null,"Warns when non null assertion operator (",(0,i.kt)("strong",{parentName:"p"},"!")," or \u201cbang\u201d operator) is used for a property access or method invocation. The operator check works at runtime and it may fail and throw a runtime exception."),(0,i.kt)("p",null,"The rule ignores the index ",(0,i.kt)("inlineCode",{parentName:"p"},"[]")," operator on the Map class because it's considered the idiomatic way to access a known-present element in a map with ",(0,i.kt)("inlineCode",{parentName:"p"},"[]!")," according to ",(0,i.kt)("a",{parentName:"p",href:"https://dart.dev/null-safety/understanding-null-safety#the-map-index-operator-is-nullable"},"the docs"),"."),(0,i.kt)("p",null,"Use this rule if you want to avoid possible unexpected runtime exceptions."),(0,i.kt)("h3",{id:"example"},"Example"),(0,i.kt)("p",null,"Bad:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-dart"},"class Test {\n  String? field;\n\n  Test? object;\n\n  void method() {\n    field!.contains('other'); // LINT\n\n    object!.field!.contains('other'); // LINT\n\n    final map = {'key': 'value'};\n    map['key']!.contains('other');\n\n    object!.method(); // LINT\n  }\n}\n")),(0,i.kt)("p",null,"Good:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-dart"},"class Test {\n  String? field;\n\n  Test? object;\n\n  void method() {\n    field?.contains('other');\n\n    object?.field?.contains('other');\n\n    final map = {'key': 'value'};\n    map['key']!.contains('other');\n\n    object?.method();\n  }\n}\n")))}m.isMDXComponent=!0}}]);