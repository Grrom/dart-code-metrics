"use strict";(self.webpackChunkdart_code_metrics_website=self.webpackChunkdart_code_metrics_website||[]).push([[4510],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=c(n),m=r,h=d["".concat(s,".").concat(m)]||d[m]||p[m]||l;return n?a.createElement(h,o(o({ref:t},u),{},{components:n})):a.createElement(h,o({ref:t},u))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,o=new Array(l);o[0]=d;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:r,o[1]=i;for(var c=2;c<l;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},3277:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return s},default:function(){return m},frontMatter:function(){return i},metadata:function(){return c},toc:function(){return p}});var a=n(7462),r=n(3366),l=(n(7294),n(3905)),o=["components"],i={},s="Check unused l10n",c={unversionedId:"cli/check-unused-l10n",id:"cli/check-unused-l10n",title:"Check unused l10n",description:"Checks unused Dart class members, that encapsulates the app\u2019s localized values.",source:"@site/docs/cli/check-unused-l10n.md",sourceDirName:"cli",slug:"/cli/check-unused-l10n",permalink:"/docs/cli/check-unused-l10n",draft:!1,editUrl:"https://github.com/dart-code-checker/dart-code-metrics/tree/master/website/docs/cli/check-unused-l10n.md",tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"Check unused files",permalink:"/docs/cli/check-unused-files"},next:{title:"Overview",permalink:"/docs/rules/overview"}},u={},p=[{value:"Output example",id:"output-example",level:2},{value:"Console",id:"console",level:3},{value:"JSON",id:"json",level:3},{value:"The <strong>root</strong> object fields are",id:"the-root-object-fields-are",level:4},{value:"The <strong>unusedLocalizations</strong> object fields are",id:"the-unusedlocalizations-object-fields-are",level:4},{value:"The <strong>issue</strong> object fields are",id:"the-issue-object-fields-are",level:4}],d={toc:p};function m(e){var t=e.components,i=(0,r.Z)(e,o);return(0,l.kt)("wrapper",(0,a.Z)({},d,i,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"check-unused-l10n"},"Check unused l10n"),(0,l.kt)("p",null,"Checks unused Dart class members, that encapsulates the app\u2019s localized values."),(0,l.kt)("p",null,"An example of such class:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-dart"},"class ClassWithLocalization {\n  String get title {\n    return Intl.message(\n      'Hello World',\n      name: 'title',\n      desc: 'Title for the Demo application',\n      locale: localeName,\n    );\n  }\n}\n")),(0,l.kt)("p",null,"Read more about this localization approach ",(0,l.kt)("a",{parentName:"p",href:"https://flutter.dev/docs/development/accessibility-and-localization/internationalization#defining-a-class-for-the-apps-localized-resources"},"in the Flutter docs"),"."),(0,l.kt)("p",null,"By default the command searches for classes that end with ",(0,l.kt)("inlineCode",{parentName:"p"},"I18n"),", but you can override this behavior with ",(0,l.kt)("inlineCode",{parentName:"p"},"--class-pattern")," argument."),(0,l.kt)("p",null,"To execute the command, run"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"$ dart run dart_code_metrics:metrics check-unused-l10n lib\n\n# or for a Flutter package\n$ flutter pub run dart_code_metrics:metrics check-unused-l10n lib\n")),(0,l.kt)("p",null,"Full command description:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},'Usage: metrics check-unused-l10n [arguments] <directories>\n-h, --help                                        Print this usage information.\n\n\n-p, --class-pattern=<I18n$>                       The pattern to detect classes providing localization\n                                                  (defaults to "I18n$")\n\n\n-r, --reporter=<console>                          The format of the output of the analysis.\n                                                  [console (default), json]\n    --report-to-file=<path/to/report.json>        The path, where a JSON file with the analysis result will be placed (only for the JSON reporter).\n\n\n    --root-folder=<./>                            Root folder.\n                                                  (defaults to current directory)\n    --sdk-path=<directory-path>                   Dart SDK directory path. \n                                                  Should be provided only when you run the application as compiled executable(https://dart.dev/tools/dart-compile#exe) and automatic Dart SDK path detection fails.\n    --exclude=<{/**.g.dart,/**.template.dart}>    File paths in Glob syntax to be exclude.\n                                                  (defaults to "{/**.g.dart,/**.template.dart}")\n\n\n    --no-congratulate                             Don\'t show output even when there are no issues.\n\n\n    --[no-]fatal-unused                           Treat find unused l10n as fatal.\n')),(0,l.kt)("h2",{id:"output-example"},"Output example"),(0,l.kt)("h3",{id:"console"},"Console"),(0,l.kt)("p",null,"Use ",(0,l.kt)("inlineCode",{parentName:"p"},"--reporter=console")," to enable this format."),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"Console",src:n(9698).Z,width:"1198",height:"310"})),(0,l.kt)("h3",{id:"json"},"JSON"),(0,l.kt)("p",null,"The reporter prints a single JSON object containing meta information and the unused file paths. Use ",(0,l.kt)("inlineCode",{parentName:"p"},"--reporter=json")," to enable this format."),(0,l.kt)("h4",{id:"the-root-object-fields-are"},"The ",(0,l.kt)("strong",{parentName:"h4"},"root")," object fields are"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"formatVersion")," - an integer representing the format version (will be incremented each time the serialization format changes)"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"timestamp")," - a creation time of the report in YYYY-MM-DD HH:MM:SS format"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"unusedLocalizations")," - an array of ",(0,l.kt)("a",{parentName:"li",href:"#the-unusedlocalizations-object-fields-are"},"unused files"))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-JSON"},'{\n  "formatVersion": 2,\n  "timestamp": "2021-04-11 14:44:42",\n  "unusedLocalizations": [\n    {\n      ...\n    },\n    {\n      ...\n    },\n    {\n      ...\n    }\n  ]\n}\n')),(0,l.kt)("h4",{id:"the-unusedlocalizations-object-fields-are"},"The ",(0,l.kt)("strong",{parentName:"h4"},"unusedLocalizations")," object fields are"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"path")," - a relative path of the unused file"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"className")," - a name of the class that has unused members"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"issues")," - an array of ",(0,l.kt)("a",{parentName:"li",href:"#the-issue-object-fields-are"},"issues")," detected in the target class")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-JSON"},'{\n  "path": "lib/src/some/class.dart",\n  "className": "class",\n  "issues": [\n    ...\n  ],\n}\n')),(0,l.kt)("h4",{id:"the-issue-object-fields-are"},"The ",(0,l.kt)("strong",{parentName:"h4"},"issue")," object fields are"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"memberName")," - unused class member name"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"offset")," - a zero-based offset of the class member location in the source"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"line")," - a zero-based line of the class member  location in the source"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"column")," - a zero-based column of class member  the location in the source")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-JSON"},'{\n  "memberName": "someGetter",\n  "offset": 156,\n  "line": 7,\n  "column": 1\n}\n')))}m.isMDXComponent=!0},9698:function(e,t,n){t.Z=n.p+"assets/images/unused-l10n-console-report-4728edb983bcfff8f81460c0568ae26c.png"}}]);